#!/bin/bash
# Script de Deploy para Sistema de Manuten√ß√£o Preditiva
# Bootcamp CDIA - Projeto Final

set -e

echo "üöÄ Iniciando deploy do Sistema de Manuten√ß√£o Preditiva..."

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fun√ß√£o para logging
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}"
    exit 1
}

warning() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

# Verificar se Docker est√° instalado
if ! command -v docker &> /dev/null; then
    error "Docker n√£o est√° instalado. Instale o Docker primeiro."
fi

if ! command -v docker-compose &> /dev/null; then
    error "Docker Compose n√£o est√° instalado. Instale o Docker Compose primeiro."
fi

# Verificar se os modelos existem
if [ ! -f "modelo_manutencao_preditiva.pkl" ]; then
    warning "Modelo n√£o encontrado. Executando treinamento..."
    python train_model.py
fi

if [ ! -f "scaler_features.pkl" ]; then
    error "Scaler n√£o encontrado. Execute o treinamento primeiro."
fi

# Verificar se os dados existem
if [ ! -f "predicoes_manutencao_preditiva.csv" ]; then
    warning "Arquivo de predi√ß√µes n√£o encontrado. Executando predi√ß√µes..."
    python train_model.py
fi

# Criar diret√≥rios necess√°rios
log "Criando diret√≥rios..."
mkdir -p logs
mkdir -p models
mkdir -p data

# Copiar modelos para diret√≥rio apropriado
log "Organizando modelos..."
cp modelo_manutencao_preditiva.pkl models/
cp scaler_features.pkl models/
cp predicoes_manutencao_preditiva.csv data/

# Construir imagens Docker
log "Construindo imagens Docker..."
docker-compose build

# Parar containers existentes
log "Parando containers existentes..."
docker-compose down

# Iniciar servi√ßos
log "Iniciando servi√ßos..."
docker-compose up -d

# Aguardar servi√ßos ficarem prontos
log "Aguardando servi√ßos ficarem prontos..."
sleep 10

# Verificar status dos servi√ßos
log "Verificando status dos servi√ßos..."

# Verificar API
if curl -f http://localhost:5000/health > /dev/null 2>&1; then
    log "‚úÖ API est√° funcionando (http://localhost:5000)"
else
    error "‚ùå API n√£o est√° respondendo"
fi

# Verificar Dashboard
if curl -f http://localhost:8501 > /dev/null 2>&1; then
    log "‚úÖ Dashboard est√° funcionando (http://localhost:8501)"
else
    warning "‚ö†Ô∏è  Dashboard pode estar iniciando ainda..."
fi

# Mostrar logs dos servi√ßos
log "√öltimos logs dos servi√ßos:"
echo ""
echo "=== API LOGS ==="
docker-compose logs --tail=10 api
echo ""
echo "=== DASHBOARD LOGS ==="
docker-compose logs --tail=10 dashboard

echo ""
log "üéâ Deploy conclu√≠do com sucesso!"
echo ""
echo "üìä Servi√ßos dispon√≠veis:"
echo "   ‚Ä¢ API: http://localhost:5000"
echo "   ‚Ä¢ Dashboard: http://localhost:8501"
echo "   ‚Ä¢ Documenta√ß√£o da API: http://localhost:5000/docs"
echo ""
echo "üîß Comandos √∫teis:"
echo "   ‚Ä¢ Ver logs: docker-compose logs -f"
echo "   ‚Ä¢ Parar servi√ßos: docker-compose down"
echo "   ‚Ä¢ Reiniciar: docker-compose restart"
echo "   ‚Ä¢ Reconstruir: docker-compose up --build -d"
echo ""
echo "üìÅ Arquivos importantes:"
echo "   ‚Ä¢ Modelos: ./models/"
echo "   ‚Ä¢ Dados: ./data/"
echo "   ‚Ä¢ Logs: ./logs/"
